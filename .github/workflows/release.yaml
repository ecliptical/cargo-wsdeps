name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross (Linux)
        if: runner.os == 'Linux'
        run: cargo install cross

      - name: Build (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: cross build --release --target ${{ matrix.target }} --features jemalloc

      - name: Build (Linux gnu)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (macOS or Windows)
        if: runner.os == 'macOS' || runner.os == 'Windows'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/cargo-wsdeps dist/
          cd dist
          tar -czf cargo-wsdeps-${{ matrix.target }}.tar.gz cargo-wsdeps
          echo -n "$(shasum -a 256 cargo-wsdeps-${{ matrix.target }}.tar.gz | cut -d ' ' -f 1)" > cargo-wsdeps-${{ matrix.target }}.tar.gz.sha256
        shell: bash

      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/cargo-wsdeps.exe dist/
          cd dist
          7z a cargo-wsdeps-${{ matrix.target }}.zip cargo-wsdeps.exe
          certutil -hashfile cargo-wsdeps-${{ matrix.target }}.zip SHA256 | findstr /v "hash" > cargo-wsdeps-${{ matrix.target }}.zip.sha256.tmp
          Set-Content -Path cargo-wsdeps-${{ matrix.target }}.zip.sha256 -Value (Get-Content cargo-wsdeps-${{ matrix.target }}.zip.sha256.tmp | Where-Object { $_ -notmatch "CertUtil" } | Select-Object -First 1)
          Remove-Item cargo-wsdeps-${{ matrix.target }}.zip.sha256.tmp
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cargo-wsdeps-${{ matrix.target }}
          path: |
            dist/cargo-wsdeps-${{ matrix.target }}.*

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate cargo-binstall metadata
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          cat > dist/cargo-wsdeps-$VERSION-binstall.json << EOF
          {
            "package": {
              "name": "cargo-wsdeps",
              "version": "$VERSION",
              "description": "Cargo subcommand to manage dependencies in a workspace.",
              "license": "MIT",
              "repository": "https://github.com/${{ github.repository }}"
            },
            "bins": [
              {
                "name": "cargo-wsdeps",
                "targets": [
                  {
                    "triple": "x86_64-unknown-linux-gnu",
                    "archive": "cargo-wsdeps-x86_64-unknown-linux-gnu.tar.gz",
                    "sha256": "$(cat dist/cargo-wsdeps-x86_64-unknown-linux-gnu.tar.gz.sha256)"
                  },
                  {
                    "triple": "x86_64-unknown-linux-musl",
                    "archive": "cargo-wsdeps-x86_64-unknown-linux-musl.tar.gz",
                    "sha256": "$(cat dist/cargo-wsdeps-x86_64-unknown-linux-musl.tar.gz.sha256)"
                  },
                  {
                    "triple": "x86_64-apple-darwin",
                    "archive": "cargo-wsdeps-x86_64-apple-darwin.tar.gz",
                    "sha256": "$(cat dist/cargo-wsdeps-x86_64-apple-darwin.tar.gz.sha256)"
                  },
                  {
                    "triple": "aarch64-apple-darwin",
                    "archive": "cargo-wsdeps-aarch64-apple-darwin.tar.gz",
                    "sha256": "$(cat dist/cargo-wsdeps-aarch64-apple-darwin.tar.gz.sha256)"
                  },
                  {
                    "triple": "x86_64-pc-windows-msvc",
                    "archive": "cargo-wsdeps-x86_64-pc-windows-msvc.zip",
                    "sha256": "$(cat dist/cargo-wsdeps-x86_64-pc-windows-msvc.zip.sha256)"
                  }
                ]
              }
            ]
          }
          EOF
        shell: bash

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/cargo-wsdeps-*
          draft: false
          prerelease: false
          generate_release_notes: true

  test-binstall:
    name: Test binstall ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@v1.14.2

      - name: Install from GitHub release (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          cargo binstall --no-confirm --force \
            --git https://github.com/${{ github.repository }} \
            cargo-wsdeps@${VERSION}
        shell: bash

      - name: Install from GitHub release (Windows)
        if: runner.os == 'Windows'
        run: |
          $VERSION = $env:GITHUB_REF -replace '^refs/tags/v', ''
          cargo binstall --no-confirm --force `
            --git https://github.com/${{ github.repository }} `
            cargo-wsdeps@$VERSION
        shell: pwsh

      - name: Verify installation
        run: cargo wsdeps --version

  trigger-homebrew-update:
    name: Trigger Homebrew Update
    needs: test-binstall
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Homebrew update workflow
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_PAT }}
        run: |
          # Create the workflow dispatch event using GitHub CLI
          VERSION=${GITHUB_REF#refs/tags/v}
          gh workflow run update-formula.yml \
            --repo ecliptical/homebrew-cargo-wsdeps \
            --ref main \
            --field version=$VERSION
            
  publish-crate:
    name: Publish to crates.io
    needs: test-binstall
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      # Note: You need to add a CRATES_IO_TOKEN secret with write access to crates.io
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          # Extract version from tag (remove v prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Verify the version in Cargo.toml matches the tag
          CARGO_VERSION=$(grep -m 1 "version = " Cargo.toml | cut -d '"' -f 2)
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "Error: Version mismatch between git tag ($VERSION) and Cargo.toml ($CARGO_VERSION)"
            exit 1
          fi
          
          # Publish to crates.io
          cargo publish --no-verify
